From abe095cf899339c9fe7e991ee03a722b097acc9b Mon Sep 17 00:00:00 2001
From: OpenAI <openai@example.com>
Date: Fri, 8 Aug 2025 10:28:45 -0700
Subject: [PATCH] feat(perf): dynamic import preview components and unify
 logging in FahndungWizardContainer

---
 .../fahndungen/FahndungWizardContainer.tsx    | 46 ++++++++++++++-----
 .../fahndungen/preview/LivePreviewCard.tsx    |  8 +++-
 2 files changed, 41 insertions(+), 13 deletions(-)

diff --git a/src/components/fahndungen/FahndungWizardContainer.tsx b/src/components/fahndungen/FahndungWizardContainer.tsx
index f775d9f..47a18d2 100644
--- a/src/components/fahndungen/FahndungWizardContainer.tsx
+++ b/src/components/fahndungen/FahndungWizardContainer.tsx
@@ -1,6 +1,10 @@
 "use client";
 
 import React, { useState, useCallback, useRef, useEffect } from "react";
+// Import the shared logger. All diagnostic output should go through
+// this module so that logs are suppressed in production builds. See
+// `src/lib/logger.ts` for implementation details.
+import { log, error as logError } from "~/lib/logger";
 import {
   ArrowLeft,
   ArrowRight,
@@ -22,9 +26,24 @@ import Step3Component from "./steps/Step3Component";
 import Step4Component from "./steps/Step4Component";
 import Step5Component from "./steps/Step5Component";
 import Step6Summary from "./steps/Step6Summary";
-import LivePreviewCard from "./preview/LivePreviewCard";
-import StatsOverview from "./preview/StatsOverview";
-import DetailPagePreview from "./preview/DetailPagePreview";
+
+// Dynamically import preview components to split chunks and avoid
+// loading heavy components (e.g. cards with maps) upfront. Server‑side
+// rendering is disabled for these components since they rely on
+// browser APIs.
+import dynamic from "next/dynamic";
+const LivePreviewCard = dynamic(
+  () => import("./preview/LivePreviewCard"),
+  { ssr: false },
+);
+const StatsOverview = dynamic(
+  () => import("./preview/StatsOverview"),
+  { ssr: false },
+);
+const DetailPagePreview = dynamic(
+  () => import("./preview/DetailPagePreview"),
+  { ssr: false },
+);
 
 // Import Types
 import type { WizardData, PreviewMode } from "./types/WizardTypes";
@@ -119,11 +138,13 @@ const FahndungWizardContainer = ({
   // DEBUG: Render Counter
   const renderCount = useRef(0);
   renderCount.current += 1;
-  console.log(`🔴 CONTAINER RENDER #${renderCount.current}`);
+  // Log render counts only in development to avoid spamming the
+  // production console. Use our logger instead of console.log.
+  log(`🔴 CONTAINER RENDER #${renderCount.current}`);
 
   // DEBUG: State Changes
   useEffect(() => {
-    console.log("🟡 wizardData changed:", wizardData);
+    log("🟡 wizardData changed:", wizardData);
   }, [wizardData]);
 
   // Setze caseNumber nur auf dem Client, wenn noch nicht gesetzt
@@ -148,7 +169,7 @@ const FahndungWizardContainer = ({
   // tRPC Mutation für das Erstellen von Fahndungen
   const createInvestigation = api.post.createInvestigation.useMutation({
     onSuccess: (data) => {
-      console.log("✅ Fahndung erfolgreich erstellt:", data);
+      log("✅ Fahndung erfolgreich erstellt:", data);
       if (wizardData.step5?.publishStatus === "immediate") {
         // Verwende die case_number statt der internen id für die URL
         router.push(`/fahndungen/${data.case_number}`);
@@ -157,7 +178,7 @@ const FahndungWizardContainer = ({
       }
     },
     onError: (error) => {
-      console.error("❌ Fehler beim Erstellen der Fahndung:", error);
+      logError("❌ Fehler beim Erstellen der Fahndung:", error);
     },
   });
 
@@ -289,15 +310,15 @@ const FahndungWizardContainer = ({
 
   const updateStepData = useCallback(
     (step: keyof WizardData, data: WizardData[keyof WizardData]) => {
-      console.log(`🔵 UPDATE CALLED: ${step}`, data);
+      log(`🔵 UPDATE CALLED: ${step}`, data);
 
       // WICHTIG: Prüfe ob sich wirklich was geändert hat
       setWizardData((prev) => {
         if (JSON.stringify(prev[step]) === JSON.stringify(data)) {
-          console.log("⚪ NO CHANGE - skipping update");
+          log("⚪ NO CHANGE - skipping update");
           return prev; // Keine Änderung!
         }
-        console.log("🟢 UPDATING STATE");
+        log("🟢 UPDATING STATE");
         return {
           ...prev,
           [step]: data,
@@ -369,7 +390,7 @@ const FahndungWizardContainer = ({
         //   mainImageUrl: wizardData.step3?.mainImageUrl ?? undefined,
         //   additionalImageUrls: wizardData.step3?.additionalImageUrls ?? undefined,
         // });
-        console.log("📝 Edit mode - updateInvestigation not yet implemented");
+        log("📝 Edit mode - updateInvestigation not yet implemented");
       } else {
         await createInvestigation.mutateAsync({
           title: wizardData.step1?.title ?? "",
@@ -396,7 +417,8 @@ const FahndungWizardContainer = ({
         });
       }
     } catch (error) {
-      console.error("Error submitting:", error);
+      logError("Error submitting:", error);
+      // Inform the user via alert. Logging is handled via our logger.
       alert("Fehler beim Speichern der Fahndung");
     } finally {
       setIsSubmitting(false);
diff --git a/src/components/fahndungen/preview/LivePreviewCard.tsx b/src/components/fahndungen/preview/LivePreviewCard.tsx
index d065221..b55e410 100644
--- a/src/components/fahndungen/preview/LivePreviewCard.tsx
+++ b/src/components/fahndungen/preview/LivePreviewCard.tsx
@@ -3,7 +3,13 @@
 import React, { useMemo, useEffect } from "react";
 import type { WizardData } from "../types/WizardTypes";
 import type { FahndungsData } from "~/components/fahndungskarte/types";
-import Fahndungskarte from "~/components/fahndungskarte/Fahndungskarte";
+// Dynamically import the Fahndungskarte to split the bundle and avoid
+// loading the heavy map logic until this preview is actually used.
+import dynamic from "next/dynamic";
+const Fahndungskarte = dynamic(
+  () => import("~/components/fahndungskarte/Fahndungskarte"),
+  { ssr: false },
+);
 
 /**
  * Wrapper‑Komponente für die Live‑Vorschau einer Fahndungskarte im Wizard.
-- 
2.39.5

