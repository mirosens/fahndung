"use client";

import React, { useState, useEffect } from "react";
import Link from "next/link";
import Image from "next/image";
import {
  ArrowLeft,
  Edit3,
  Save,
  X,
  Shield,
  Clock,
  Eye,
  FileText,
  MapPin,
  Phone,
  Mail,
  Calendar,
  User,
  Image as ImageIcon,
  AlertCircle,
  Info,
  Loader2,
  Camera,
} from "lucide-react";
import { toast } from "sonner";

// Import components
import WizardTabNavigation, {
  type WizardTab,
} from "@/components/investigation/WizardTabNavigation";
import PageLayout from "@/components/layout/PageLayout";
import { getCurrentSession, type Session, canEdit } from "~/lib/auth";
import { CaseNumberDetailed } from "~/components/ui/CaseNumberDisplay";
import { api } from "~/trpc/react";

// Types
interface EditableInvestigation {
  id: string;
  title: string;
  case_number: string;
  description: string;
  short_description: string;
  status: string;
  priority: "normal" | "urgent" | "new";
  category: string;
  location: string;
  station: string;
  features: string;
  tags: string[];
  contact_info: {
    person?: string;
    phone?: string;
    email?: string;
  };
  images?: Array<{
    id: string;
    url: string;
    alt_text?: string;
    caption?: string;
  }>;
}

interface FahndungDetailContentProps {
  investigationId: string;
}

export default function FahndungDetailContent({
  investigationId,
}: FahndungDetailContentProps) {
  const [activeTab, setActiveTab] = useState("overview");
  const [session, setSession] = React.useState<Session | null>(null);
  const [isEditMode, setIsEditMode] = useState(false);
  const [editedData, setEditedData] = useState<EditableInvestigation | null>(null);
  const [hasChanges, setHasChanges] = useState(false);

  React.useEffect(() => {
    void getCurrentSession().then(setSession);
  }, []);

  // Lade echte Daten aus der Datenbank
  const {
    data: dbInvestigation,
    isLoading,
    error,
    refetch,
  } = api.post.getInvestigation.useQuery(
    { id: investigationId },
    {
      enabled: !!investigationId,
    },
  );

  // Update-Mutation
  const updateMutation = api.post.updateInvestigation.useMutation({
    onSuccess: () => {
      toast.success("Änderungen erfolgreich gespeichert");
      setIsEditMode(false);
      setHasChanges(false);
      void refetch();
    },
    onError: (error) => {
      toast.error(`Fehler beim Speichern: ${error.message}`);
    },
  });

  // Initialisiere editedData wenn Daten geladen
  useEffect(() => {
    if (dbInvestigation && !editedData) {
      setEditedData({
        id: dbInvestigation.id,
        title: dbInvestigation.title,
        case_number: dbInvestigation.case_number,
        description: dbInvestigation.description,
        short_description: dbInvestigation.short_description,
        status: dbInvestigation.status,
        priority: dbInvestigation.priority,
        category: dbInvestigation.category,
        location: dbInvestigation.location,
        station: dbInvestigation.station,
        features: dbInvestigation.features,
        tags: dbInvestigation.tags ?? [],
        contact_info: dbInvestigation.contact_info ?? {},
        images: dbInvestigation.images,
      });
    }
  }, [dbInvestigation, editedData]);

  // Prüfe auf Änderungen
  useEffect(() => {
    if (dbInvestigation && editedData) {
      const changed = JSON.stringify(dbInvestigation) !== JSON.stringify(editedData);
      setHasChanges(changed);
    }
  }, [dbInvestigation, editedData]);

  // Handler
  const handleEditToggle = () => {
    if (isEditMode && hasChanges) {
      // Speichern
      handleSave();
    } else {
      setIsEditMode(!isEditMode);
    }
  };

  const handleCancel = () => {
    if (dbInvestigation) {
      setEditedData({
        id: dbInvestigation.id,
        title: dbInvestigation.title,
        case_number: dbInvestigation.case_number,
        description: dbInvestigation.description,
        short_description: dbInvestigation.short_description,
        status: dbInvestigation.status,
        priority: dbInvestigation.priority,
        category: dbInvestigation.category,
        location: dbInvestigation.location,
        station: dbInvestigation.station,
        features: dbInvestigation.features,
        tags: dbInvestigation.tags ?? [],
        contact_info: dbInvestigation.contact_info ?? {},
        images: dbInvestigation.images,
      });
    }
    setIsEditMode(false);
    setHasChanges(false);
  };

  const handleSave = async () => {
    if (!editedData || !hasChanges) return;

    await updateMutation.mutateAsync({
      id: editedData.id,
      title: editedData.title,
      description: editedData.description,
      status: editedData.status,
      priority: editedData.priority,
      tags: editedData.tags,
      location: editedData.location,
      contact_info: editedData.contact_info,
      features: editedData.features,
    });
  };

  const updateField = (field: keyof EditableInvestigation, value: any) => {
    if (!editedData) return;
    setEditedData({ ...editedData, [field]: value });
  };

  const updateContactInfo = (field: string, value: string) => {
    if (!editedData) return;
    setEditedData({
      ...editedData,
      contact_info: { ...editedData.contact_info, [field]: value },
    });
  };

  // Loading State
  if (isLoading || !editedData) {
    return (
      <PageLayout session={session}>
        <div className="flex min-h-[400px] items-center justify-center">
          <div className="flex flex-col items-center gap-4">
            <Loader2 className="h-8 w-8 animate-spin text-blue-600" />
            <p className="text-gray-600 dark:text-gray-400">
              Lade Fahndungsdaten...
            </p>
          </div>
        </div>
      </PageLayout>
    );
  }

  // Error State
  if (error) {
    return (
      <PageLayout session={session}>
        <div className="flex min-h-[400px] items-center justify-center">
          <div className="flex flex-col items-center gap-4 text-center">
            <AlertCircle className="h-12 w-12 text-red-500" />
            <h2 className="text-xl font-semibold text-gray-900 dark:text-white">
              Fahndung nicht gefunden
            </h2>
            <p className="text-gray-600 dark:text-gray-400">
              Die angeforderte Fahndung konnte nicht geladen werden.
            </p>
          </div>
        </div>
      </PageLayout>
    );
  }

  // Render content based on active tab
  const renderTabContent = () => {
    switch (activeTab) {
      case "overview":
        return (
          <div className="space-y-6">
            {/* Hero Section */}
            <div className="relative overflow-hidden rounded-xl bg-gradient-to-br from-blue-600 to-blue-800 p-8 text-white">
              <div className="absolute inset-0 bg-black/20" />
              <div className="relative z-10">
                <div className="mb-4 flex items-center gap-2">
                  <span className="rounded-full bg-white/20 px-3 py-1 text-sm font-medium">
                    {editedData.category === "MISSING_PERSON"
                      ? "Vermisste"
                      : editedData.category === "WANTED_PERSON"
                        ? "Straftäter"
                        : editedData.category === "UNKNOWN_DEAD"
                          ? "Unbekannte Tote"
                          : "Sachen"}
                  </span>
                  {isEditMode ? (
                    <select
                      value={editedData.priority}
                      onChange={(e) => updateField("priority", e.target.value)}
                      className="rounded-full bg-white/20 px-3 py-1 text-sm font-medium backdrop-blur"
                    >
                      <option value="normal">Normal</option>
                      <option value="urgent">Dringend</option>
                      <option value="new">Neu</option>
                    </select>
                  ) : (
                    <span
                      className={`rounded-full px-3 py-1 text-sm font-medium ${
                        editedData.priority === "urgent"
                          ? "bg-red-500/20 text-red-100"
                          : editedData.priority === "new"
                            ? "bg-green-500/20 text-green-100"
                            : "bg-gray-500/20 text-gray-100"
                      }`}
                    >
                      {editedData.priority === "urgent"
                        ? "Dringend"
                        : editedData.priority === "new"
                          ? "Neu"
                          : "Normal"}
                    </span>
                  )}
                </div>
                {isEditMode ? (
                  <input
                    type="text"
                    value={editedData.title}
                    onChange={(e) => updateField("title", e.target.value)}
                    className="mb-2 w-full bg-transparent text-3xl font-bold outline-none border-b-2 border-white/50"
                  />
                ) : (
                  <h1 className="mb-2 text-3xl font-bold">{editedData.title}</h1>
                )}
                {isEditMode ? (
                  <textarea
                    value={editedData.short_description}
                    onChange={(e) => updateField("short_description", e.target.value)}
                    className="w-full bg-transparent text-lg text-blue-100 outline-none resize-none"
                    rows={2}
                  />
                ) : (
                  <p className="text-lg text-blue-100">
                    {editedData.short_description}
                  </p>
                )}
              </div>
            </div>

            {/* Description */}
            <div className="rounded-xl border border-gray-200 bg-white p-6 dark:border-gray-700 dark:bg-gray-800">
              <h3 className="mb-4 text-xl font-semibold text-gray-900 dark:text-white">
                Beschreibung
              </h3>
              {isEditMode ? (
                <textarea
                  value={editedData.description}
                  onChange={(e) => updateField("description", e.target.value)}
                  className="w-full min-h-[150px] p-3 border rounded-lg resize-none"
                />
              ) : (
                <p className="leading-relaxed text-gray-700 dark:text-gray-300">
                  {editedData.description}
                </p>
              )}
            </div>

            {/* Features */}
            {(editedData.features || isEditMode) && (
              <div className="rounded-xl border border-gray-200 bg-white p-6 dark:border-gray-700 dark:bg-gray-800">
                <h3 className="mb-4 text-xl font-semibold text-gray-900 dark:text-white">
                  Merkmale
                </h3>
                {isEditMode ? (
                  <textarea
                    value={editedData.features}
                    onChange={(e) => updateField("features", e.target.value)}
                    className="w-full min-h-[100px] p-3 border rounded-lg resize-none"
                    placeholder="Besondere Merkmale eingeben..."
                  />
                ) : (
                  <p className="leading-relaxed text-gray-700 dark:text-gray-300">
                    {editedData.features}
                  </p>
                )}
              </div>
            )}

            {/* Tags */}
            {(editedData.tags.length > 0 || isEditMode) && (
              <div className="rounded-xl border border-gray-200 bg-white p-6 dark:border-gray-700 dark:bg-gray-800">
                <h3 className="mb-4 text-xl font-semibold text-gray-900 dark:text-white">
                  Schlagworte
                </h3>
                {isEditMode ? (
                  <input
                    type="text"
                    value={editedData.tags.join(", ")}
                    onChange={(e) => updateField("tags", e.target.value.split(", ").filter(Boolean))}
                    className="w-full p-3 border rounded-lg"
                    placeholder="Schlagworte durch Komma getrennt..."
                  />
                ) : (
                  <div className="flex flex-wrap gap-2">
                    {editedData.tags.map((tag, index) => (
                      <span
                        key={index}
                        className="rounded-full bg-blue-100 px-3 py-1 text-sm font-medium text-blue-800 dark:bg-blue-900 dark:text-blue-200"
                      >
                        {tag}
                      </span>
                    ))}
                  </div>
                )}
              </div>
            )}

            {/* Contact Information */}
            <div className="rounded-xl border border-gray-200 bg-white p-6 dark:border-gray-700 dark:bg-gray-800">
              <h3 className="mb-4 text-xl font-semibold text-gray-900 dark:text-white">
                Kontakt
              </h3>
              <div className="space-y-3">
                <div className="flex items-center gap-3">
                  <User className="h-5 w-5 text-gray-500" />
                  {isEditMode ? (
                    <input
                      type="text"
                      value={editedData.contact_info.person ?? ""}
                      onChange={(e) => updateContactInfo("person", e.target.value)}
                      className="flex-1 p-2 border rounded"
                      placeholder="Ansprechpartner"
                    />
                  ) : (
                    <span className="text-gray-700 dark:text-gray-300">
                      {editedData.contact_info.person ?? "Polizei"}
                    </span>
                  )}
                </div>
                <div className="flex items-center gap-3">
                  <Phone className="h-5 w-5 text-gray-500" />
                  {isEditMode ? (
                    <input
                      type="tel"
                      value={editedData.contact_info.phone ?? ""}
                      onChange={(e) => updateContactInfo("phone", e.target.value)}
                      className="flex-1 p-2 border rounded"
                      placeholder="Telefonnummer"
                    />
                  ) : (
                    <span className="text-gray-700 dark:text-gray-300">
                      {editedData.contact_info.phone ?? "+49 711 8990-0"}
                    </span>
                  )}
                </div>
                {(editedData.contact_info.email || isEditMode) && (
                  <div className="flex items-center gap-3">
                    <Mail className="h-5 w-5 text-gray-500" />
                    {isEditMode ? (
                      <input
                        type="email"
                        value={editedData.contact_info.email ?? ""}
                        onChange={(e) => updateContactInfo("email", e.target.value)}
                        className="flex-1 p-2 border rounded"
                        placeholder="E-Mail-Adresse"
                      />
                    ) : (
                      <span className="text-gray-700 dark:text-gray-300">
                        {editedData.contact_info.email}
                      </span>
                    )}
                  </div>
                )}
                <div className="flex items-center gap-3">
                  <Shield className="h-5 w-5 text-gray-500" />
                  {isEditMode ? (
                    <input
                      type="text"
                      value={editedData.station}
                      onChange={(e) => updateField("station", e.target.value)}
                      className="flex-1 p-2 border rounded"
                      placeholder="Dienststelle"
                    />
                  ) : (
                    <span className="text-gray-700 dark:text-gray-300">
                      {editedData.station}
                    </span>
                  )}
                </div>
              </div>
            </div>
          </div>
        );

      case "media":
        return (
          <div className="space-y-6">
            <div className="rounded-xl border border-gray-200 bg-white p-6 dark:border-gray-700 dark:bg-gray-800">
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-xl font-semibold text-gray-900 dark:text-white">
                  Medien
                </h3>
                {isEditMode && (
                  <button className="flex items-center gap-2 px-3 py-2 text-sm bg-blue-100 text-blue-700 rounded-lg hover:bg-blue-200">
                    <Camera className="h-4 w-4" />
                    Bilder hinzufügen
                  </button>
                )}
              </div>
              {editedData.images && editedData.images.length > 0 ? (
                <div className="grid grid-cols-1 gap-4 sm:grid-cols-2 lg:grid-cols-3">
                  {editedData.images.map((image, index) => (
                    <div
                      key={image.id ?? index}
                      className="relative overflow-hidden rounded-lg group"
                    >
                      <Image
                        src={image.url}
                        alt={image.alt_text ?? `Bild ${index + 1}`}
                        width={400}
                        height={192}
                        className="h-48 w-full object-cover"
                      />
                      {isEditMode && (
                        <div className="absolute inset-0 bg-black/50 opacity-0 group-hover:opacity-100 transition-opacity flex items-center justify-center">
                          <button className="p-2 bg-red-500 text-white rounded-full">
                            <X className="h-4 w-4" />
                          </button>
                        </div>
                      )}
                      {image.caption && (
                        <p className="mt-2 text-sm text-gray-600 dark:text-gray-400">
                          {image.caption}
                        </p>
                      )}
                    </div>
                  ))}
                </div>
              ) : (
                <p className="text-gray-500 dark:text-gray-400">
                  Keine Medien verfügbar.
                </p>
              )}
            </div>
          </div>
        );

      case "locations":
        return (
          <div className="space-y-6">
            <div className="rounded-xl border border-gray-200 bg-white p-6 dark:border-gray-700 dark:bg-gray-800">
              <h3 className="mb-4 text-xl font-semibold text-gray-900 dark:text-white">
                Hauptort
              </h3>
              <div className="flex items-center gap-3">
                <MapPin className="h-5 w-5 text-gray-500" />
                {isEditMode ? (
                  <input
                    type="text"
                    value={editedData.location}
                    onChange={(e) => updateField("location", e.target.value)}
                    className="flex-1 p-2 border rounded"
                    placeholder="Ortsangabe"
                  />
                ) : (
                  <span className="text-gray-700 dark:text-gray-300">
                    {editedData.location || "Keine Ortsangabe"}
                  </span>
                )}
              </div>
            </div>
          </div>
        );

      default:
        return null;
    }
  };

  // Wizard Navigation Tabs
  const wizardTabs: WizardTab[] = [
    {
      id: "overview",
      label: "Übersicht",
      icon: Info,
      description: "Zusammenfassung aller Informationen",
      completed: true,
    },
    {
      id: "description",
      label: "Beschreibung",
      icon: FileText,
      description: "Detaillierte Fallbeschreibung und Merkmale",
      completed: true,
    },
    {
      id: "media",
      label: "Medien",
      icon: ImageIcon,
      description: "Bilder und Dokumente",
      completed: false,
    },
    {
      id: "locations",
      label: "Orte",
      icon: MapPin,
      description: "Relevante Standorte und Karte",
      completed: true,
    },
    {
      id: "contact",
      label: "Kontakt",
      icon: Phone,
      description: "Ansprechpartner und Erreichbarkeit",
      completed: true,
    },
  ];

  return (
    <PageLayout session={session}>
      <div className="mx-auto max-w-7xl px-4 py-8 sm:px-6 lg:px-8">
        {/* Header */}
        <div className="mb-8">
          <div className="mt-4 flex items-center justify-between">
            <div className="flex items-center gap-4">
              <Link
                href="/fahndungen"
                className="flex items-center gap-2 text-gray-600 hover:text-gray-900 dark:text-gray-400 dark:hover:text-white"
              >
                <ArrowLeft className="h-4 w-4" />
                Zurück zu allen Fahndungen
              </Link>
            </div>

            <div className="flex items-center gap-2">
              {canEdit(session?.profile ?? null) && (
                <>
                  {isEditMode && (
                    <button
                      onClick={handleCancel}
                      className="flex items-center gap-2 rounded-lg bg-gray-200 px-4 py-2 text-gray-700 hover:bg-gray-300"
                    >
                      <X className="h-4 w-4" />
                      Abbrechen
                    </button>
                  )}
                  <button
                    onClick={handleEditToggle}
                    disabled={updateMutation.isPending}
                    className={`flex items-center gap-2 rounded-lg px-4 py-2 text-white ${
                      isEditMode && hasChanges
                        ? "bg-green-600 hover:bg-green-700"
                        : "bg-blue-600 hover:bg-blue-700"
                    }`}
                  >
                    {updateMutation.isPending ? (
                      <Loader2 className="h-4 w-4 animate-spin" />
                    ) : isEditMode && hasChanges ? (
                      <>
                        <Save className="h-4 w-4" />
                        Speichern
                      </>
                    ) : (
                      <>
                        <Edit3 className="h-4 w-4" />
                        Bearbeiten
                      </>
                    )}
                  </button>
                </>
              )}
            </div>
          </div>
        </div>

        {/* Edit Mode Indicator */}
        {isEditMode && (
          <div className="mb-6 rounded-lg bg-yellow-50 border border-yellow-200 p-4">
            <div className="flex items-center gap-2">
              <AlertCircle className="h-5 w-5 text-yellow-600" />
              <p className="text-sm font-medium text-yellow-800">
                Bearbeitungsmodus aktiv - Änderungen werden erst nach dem Speichern übernommen
              </p>
            </div>
          </div>
        )}

        {/* Horizontal Wizard Navigation */}
        <div className="mb-8">
          <WizardTabNavigation
            tabs={wizardTabs}
            activeTab={activeTab}
            onTabChange={setActiveTab}
            showProgress={false}
          />
        </div>

        {/* Main Content */}
        <div className="w-full">{renderTabContent()}</div>
      </div>
    </PageLayout>
  );
}