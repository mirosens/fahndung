// src/components/fahndungen/FahndungDetailContent.tsx (Auszug der wichtigsten Teile)

import { InvestigationDataConverter, type UIInvestigationData } from "~/lib/services/investigationDataConverter";
import { toast } from "sonner";

export default function FahndungDetailContent({ investigationId }: FahndungDetailContentProps) {
  const [activeTab, setActiveTab] = useState("overview");
  const [session, setSession] = useState<Session | null>(null);
  const [isEditMode, setIsEditMode] = useState(false);
  const [editedData, setEditedData] = useState<UIInvestigationData | null>(null);
  const [originalData, setOriginalData] = useState<UIInvestigationData | null>(null);
  const [validationErrors, setValidationErrors] = useState<string[]>([]);

  // Lade echte Daten aus der Datenbank
  const {
    data: dbInvestigation,
    isLoading,
    error,
    refetch,
  } = api.post.getInvestigation.useQuery(
    { id: investigationId },
    { enabled: !!investigationId }
  );

  // Update-Mutation mit verbesserter Fehlerbehandlung
  const updateMutation = api.post.updateInvestigation.useMutation({
    onSuccess: () => {
      toast.success("Änderungen erfolgreich gespeichert");
      setIsEditMode(false);
      setValidationErrors([]);
      void refetch();
    },
    onError: (error) => {
      console.error("Update-Fehler:", error);
      toast.error(`Fehler beim Speichern: ${error.message}`);
    },
  });

  // Initialisiere Daten wenn geladen
  useEffect(() => {
    if (dbInvestigation && !originalData) {
      // Konvertiere DB-Format zu UI-Format
      const uiData = InvestigationDataConverter.toUIFormat(dbInvestigation);
      setOriginalData(uiData);
      setEditedData(uiData);
    }
  }, [dbInvestigation, originalData]);

  // Handler für Edit-Modus Toggle
  const handleEditToggle = () => {
    if (isEditMode) {
      // Verlasse Edit-Modus
      if (hasUnsavedChanges()) {
        if (!window.confirm("Ungespeicherte Änderungen gehen verloren. Fortfahren?")) {
          return;
        }
      }
      // Reset zu Original-Daten
      setEditedData(originalData);
      setIsEditMode(false);
      setValidationErrors([]);
    } else {
      // Betrete Edit-Modus
      setIsEditMode(true);
    }
  };

  // Prüfe auf ungespeicherte Änderungen
  const hasUnsavedChanges = (): boolean => {
    if (!originalData || !editedData) return false;
    return JSON.stringify(originalData) !== JSON.stringify(editedData);
  };

  // Verbesserte Save-Funktion
  const handleSave = async () => {
    if (!editedData || !originalData) return;

    // Validiere Daten
    const validation = InvestigationDataConverter.validateUIData(editedData);
    if (!validation.isValid) {
      setValidationErrors(validation.errors);
      toast.error("Bitte korrigieren Sie die Eingabefehler");
      return;
    }

    // Extrahiere nur geänderte Felder
    const changedFields = InvestigationDataConverter.getChangedFields(originalData, editedData);
    
    // Prüfe ob überhaupt Änderungen vorhanden sind
    if (Object.keys(changedFields).length === 0) {
      toast.info("Keine Änderungen vorhanden");
      setIsEditMode(false);
      return;
    }

    // Logging für Debugging
    console.log("Speichere Änderungen:", changedFields);

    try {
      // Sende nur geänderte Felder
      await updateMutation.mutateAsync({
        id: investigationId,
        ...changedFields,
      });
      
      // Update local state nach erfolgreichem Speichern
      setOriginalData(editedData);
    } catch (error) {
      console.error("Speicherfehler:", error);
    }
  };

  // Field Change Handler mit verbesserter Typisierung
  const handleFieldChange = (
    step: keyof UIInvestigationData,
    field: string,
    value: any
  ) => {
    setEditedData((prev) => {
      if (!prev) return prev;
      
      // Deep clone für sichere Updates
      const updated = JSON.parse(JSON.stringify(prev)) as UIInvestigationData;
      
      // Type-safe field update
      if (step in updated && typeof updated[step] === 'object') {
        (updated[step] as any)[field] = value;
      }
      
      return updated;
    });
    
    // Clear validation errors when user types
    if (validationErrors.length > 0) {
      setValidationErrors([]);
    }
  };

  // Loading State
  if (isLoading || !editedData) {
    return (
      <PageLayout session={session}>
        <div className="flex min-h-[400px] items-center justify-center">
          <Loader2 className="h-8 w-8 animate-spin text-blue-600" />
        </div>
      </PageLayout>
    );
  }

  // Render Validation Errors
  const renderValidationErrors = () => {
    if (validationErrors.length === 0) return null;

    return (
      <div className="mb-4 rounded-lg bg-red-50 border border-red-200 p-4">
        <h4 className="font-medium text-red-800 mb-2">Bitte korrigieren Sie folgende Fehler:</h4>
        <ul className="list-disc list-inside text-sm text-red-700">
          {validationErrors.map((error, index) => (
            <li key={index}>{error}</li>
          ))}
        </ul>
      </div>
    );
  };

  // Render Tab Content mit korrekten Datenreferenzen
  const renderTabContent = () => {
    switch (activeTab) {
      case "overview":
        return (
          <div className="space-y-6">
            {renderValidationErrors()}
            
            {/* Hero Section */}
            <div className="relative overflow-hidden rounded-xl bg-gradient-to-br from-blue-600 to-blue-800 p-8 text-white">
              <div className="relative z-10">
                {/* Priority Selection */}
                {isEditMode ? (
                  <select
                    value={editedData.step2.priority}
                    onChange={(e) => handleFieldChange("step2", "priority", e.target.value)}
                    className="mb-4 rounded bg-white/20 px-3 py-1 text-sm font-medium text-white backdrop-blur"
                  >
                    <option value="normal" className="text-gray-900">Normal</option>
                    <option value="urgent" className="text-gray-900">Dringend</option>
                    <option value="new" className="text-gray-900">Neu</option>
                  </select>
                ) : (
                  <span className={`mb-4 inline-block rounded-full px-3 py-1 text-sm font-medium ${
                    editedData.step2.priority === "urgent" ? "bg-red-500/20" :
                    editedData.step2.priority === "new" ? "bg-green-500/20" :
                    "bg-gray-500/20"
                  }`}>
                    {editedData.step2.priority === "urgent" ? "Dringend" :
                     editedData.step2.priority === "new" ? "Neu" : "Normal"}
                  </span>
                )}

                {/* Title */}
                {isEditMode ? (
                  <input
                    type="text"
                    value={editedData.step1.title}
                    onChange={(e) => handleFieldChange("step1", "title", e.target.value)}
                    className="mb-2 w-full bg-transparent text-3xl font-bold outline-none border-b-2 border-white/50 text-white placeholder-white/70"
                    placeholder="Titel eingeben..."
                  />
                ) : (
                  <h1 className="mb-2 text-3xl font-bold">{editedData.step1.title}</h1>
                )}

                {/* Short Description */}
                {isEditMode ? (
                  <textarea
                    value={editedData.step2.shortDescription}
                    onChange={(e) => handleFieldChange("step2", "shortDescription", e.target.value)}
                    className="w-full bg-transparent text-lg text-blue-100 outline-none resize-none border-b border-white/30"
                    rows={2}
                    placeholder="Kurzbeschreibung..."
                  />
                ) : (
                  <p className="text-lg text-blue-100">{editedData.step2.shortDescription}</p>
                )}
              </div>
            </div>

            {/* Description */}
            <div className="rounded-xl border border-gray-200 bg-white p-6">
              <h3 className="mb-4 text-xl font-semibold">Beschreibung</h3>
              {isEditMode ? (
                <textarea
                  value={editedData.step2.description}
                  onChange={(e) => handleFieldChange("step2", "description", e.target.value)}
                  className="w-full min-h-[150px] p-3 border rounded-lg resize-none"
                  placeholder="Detaillierte Beschreibung..."
                />
              ) : (
                <p className="leading-relaxed text-gray-700">{editedData.step2.description}</p>
              )}
            </div>

            {/* Contact Information */}
            <div className="rounded-xl border border-gray-200 bg-white p-6">
              <h3 className="mb-4 text-xl font-semibold">Kontakt</h3>
              <div className="space-y-3">
                <div className="flex items-center gap-3">
                  <User className="h-5 w-5 text-gray-500" />
                  {isEditMode ? (
                    <input
                      type="text"
                      value={editedData.step5.contactPerson}
                      onChange={(e) => handleFieldChange("step5", "contactPerson", e.target.value)}
                      className="flex-1 p-2 border rounded"
                      placeholder="Ansprechpartner"
                    />
                  ) : (
                    <span>{editedData.step5.contactPerson}</span>
                  )}
                </div>
                <div className="flex items-center gap-3">
                  <Phone className="h-5 w-5 text-gray-500" />
                  {isEditMode ? (
                    <input
                      type="tel"
                      value={editedData.step5.contactPhone}
                      onChange={(e) => handleFieldChange("step5", "contactPhone", e.target.value)}
                      className="flex-1 p-2 border rounded"
                      placeholder="Telefonnummer"
                    />
                  ) : (
                    <span>{editedData.step5.contactPhone}</span>
                  )}
                </div>
              </div>
            </div>
          </div>
        );
      // ... weitere Tabs
    }
  };

  return (
    <PageLayout session={session}>
      <div className="mx-auto max-w-7xl px-4 py-8">
        {/* Header */}
        <div className="mb-8 flex items-center justify-between">
          <Link href="/fahndungen" className="flex items-center gap-2 text-gray-600">
            <ArrowLeft className="h-4 w-4" />
            Zurück
          </Link>

          <div className="flex items-center gap-2">
            {canEdit(session?.profile ?? null) && (
              <>
                {isEditMode && (
                  <button
                    onClick={handleEditToggle}
                    className="rounded-lg bg-gray-200 px-4 py-2"
                  >
                    Abbrechen
                  </button>
                )}
                <button
                  onClick={isEditMode ? handleSave : handleEditToggle}
                  disabled={updateMutation.isPending}
                  className={`rounded-lg px-4 py-2 text-white ${
                    isEditMode ? "bg-green-600" : "bg-blue-600"
                  }`}
                >
                  {updateMutation.isPending ? (
                    <Loader2 className="h-4 w-4 animate-spin" />
                  ) : isEditMode ? (
                    <>
                      <Save className="mr-2 h-4 w-4 inline" />
                      Speichern
                    </>
                  ) : (
                    <>
                      <Edit3 className="mr-2 h-4 w-4 inline" />
                      Bearbeiten
                    </>
                  )}
                </button>
              </>
            )}
          </div>
        </div>

        {/* Edit Mode Indicator */}
        {isEditMode && (
          <div className="mb-6 rounded-lg bg-yellow-50 border border-yellow-200 p-4">
            <p className="text-sm font-medium text-yellow-800">
              Bearbeitungsmodus aktiv - Änderungen werden erst nach dem Speichern übernommen
            </p>
          </div>
        )}

        {/* Content */}
        {renderTabContent()}
      </div>
    </PageLayout>
  );
}