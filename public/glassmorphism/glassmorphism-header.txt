"use client";

import { useState, useEffect } from "react";
import { cn } from "~/lib/utils";
import { EnhancedNavigation } from "./EnhancedNavigation";

interface GlassmorphismHeaderProps {
  variant?: "subtle" | "frosted" | "aurora" | "premium";
  isAuthenticated?: boolean;
  onSearch?: (query: string) => void;
  className?: string;
}

export function GlassmorphismHeader({
  variant = "frosted",
  isAuthenticated = false,
  onSearch,
  className,
}: GlassmorphismHeaderProps) {
  const [isScrolled, setIsScrolled] = useState(false);

  // Scroll-Detection für dynamische Effekte
  useEffect(() => {
    const handleScroll = () => {
      setIsScrolled(window.scrollY > 10);
    };

    window.addEventListener("scroll", handleScroll, { passive: true });
    return () => window.removeEventListener("scroll", handleScroll);
  }, []);

  // Glasmorphismus-Varianten
  const variants = {
    subtle: cn(
      "bg-white/80 dark:bg-gray-900/80",
      "backdrop-blur-sm",
      "border-white/20 dark:border-gray-700/30",
      "shadow-[0_8px_32px_0_rgba(31,38,135,0.15)]"
    ),
    frosted: cn(
      "bg-white/60 dark:bg-gray-900/60",
      "backdrop-blur-md backdrop-saturate-150",
      "border-white/30 dark:border-gray-700/40",
      "shadow-[0_8px_32px_0_rgba(31,38,135,0.2)]",
      "before:absolute before:inset-0 before:-z-10",
      "before:bg-gradient-to-br before:from-white/10 before:to-white/5",
      "dark:before:from-white/5 dark:before:to-white/0"
    ),
    aurora: cn(
      "bg-gradient-to-r from-white/40 via-white/60 to-white/40",
      "dark:from-gray-900/40 dark:via-gray-900/60 dark:to-gray-900/40",
      "backdrop-blur-xl backdrop-saturate-200",
      "border-white/40 dark:border-gray-700/50",
      "shadow-[0_8px_40px_0_rgba(31,38,135,0.25)]",
      "before:absolute before:inset-0 before:-z-10",
      "before:bg-gradient-to-r before:from-blue-400/10 before:via-purple-400/10 before:to-pink-400/10",
      "before:animate-aurora"
    ),
    premium: cn(
      "bg-white/70 dark:bg-gray-900/70",
      "backdrop-blur-2xl backdrop-saturate-[180%]",
      "border-white/50 dark:border-gray-700/60",
      "shadow-[0_20px_70px_-10px_rgba(31,38,135,0.3)]",
      "before:absolute before:inset-0 before:-z-10 before:rounded-[inherit]",
      "before:bg-gradient-to-br before:from-white/20 before:via-white/10 before:to-transparent",
      "after:absolute after:inset-0 after:-z-10 after:rounded-[inherit]",
      "after:bg-[radial-gradient(circle_at_20%_80%,rgba(120,200,255,0.15),transparent_50%)]",
      "dark:after:bg-[radial-gradient(circle_at_20%_80%,rgba(120,200,255,0.08),transparent_50%)]"
    ),
  };

  return (
    <>
      {/* Noise Texture Overlay für Realismus */}
      <div
        className="fixed inset-0 z-30 pointer-events-none opacity-[0.015]"
        style={{
          backgroundImage: `url("data:image/svg+xml,%3Csvg width='200' height='200' xmlns='http://www.w3.org/2000/svg'%3E%3Cfilter id='noise'%3E%3CfeTurbulence type='fractalNoise' baseFrequency='0.9' numOctaves='4' /%3E%3C/filter%3E%3Crect width='100%25' height='100%25' filter='url(%23noise)' /%3E%3C/svg%3E")`,
        }}
      />

      {/* Hauptheader */}
      <header
        className={cn(
          "sticky top-0 z-40 w-full transition-all duration-500",
          "border-b",
          variants[variant],
          isScrolled && "shadow-lg",
          className
        )}
      >
        {/* Gradient Overlays für Premium-Look */}
        {variant === "aurora" && (
          <div className="absolute inset-0 -z-20 opacity-30">
            <div className="absolute inset-0 bg-gradient-to-r from-blue-500/20 via-purple-500/20 to-pink-500/20 animate-gradient-x" />
          </div>
        )}

        {/* Inner Glow Effect */}
        <div
          className={cn(
            "absolute inset-x-0 top-0 h-px",
            "bg-gradient-to-r from-transparent via-white/50 to-transparent",
            "dark:via-white/20"
          )}
        />

        {/* Navigation Content */}
        <div className="relative">
          <EnhancedNavigation
            isAuthenticated={isAuthenticated}
            onSearch={onSearch}
            className="border-0 shadow-none backdrop-blur-none bg-transparent"
          />
        </div>

        {/* Bottom Reflection */}
        <div
          className={cn(
            "absolute inset-x-0 bottom-0 h-px",
            "bg-gradient-to-r from-transparent via-white/30 to-transparent",
            "dark:via-white/10"
          )}
        />
      </header>

      {/* Background Blur Area für Demo */}
      <div
        className="fixed inset-0 -z-50 opacity-60"
        style={{
          background: `
            radial-gradient(circle at 20% 50%, rgba(120, 200, 255, 0.3) 0%, transparent 50%),
            radial-gradient(circle at 80% 50%, rgba(255, 120, 200, 0.3) 0%, transparent 50%),
            radial-gradient(circle at 50% 100%, rgba(200, 120, 255, 0.3) 0%, transparent 50%)
          `,
        }}
      />
    </>
  );
}

// Zusätzliche Glasmorphismus-Komponenten

// Glass Card Component
export function GlassCard({
  children,
  className,
  blur = "md",
}: {
  children: React.ReactNode;
  className?: string;
  blur?: "sm" | "md" | "lg" | "xl" | "2xl";
}) {
  const blurClasses = {
    sm: "backdrop-blur-sm",
    md: "backdrop-blur-md",
    lg: "backdrop-blur-lg",
    xl: "backdrop-blur-xl",
    "2xl": "backdrop-blur-2xl",
  };

  return (
    <div
      className={cn(
        "relative overflow-hidden rounded-2xl",
        "bg-white/70 dark:bg-gray-900/70",
        blurClasses[blur],
        "backdrop-saturate-150",
        "border border-white/30 dark:border-gray-700/40",
        "shadow-[0_8px_32px_0_rgba(31,38,135,0.15)]",
        "before:absolute before:inset-0 before:-z-10",
        "before:bg-gradient-to-br before:from-white/10 before:to-white/5",
        "dark:before:from-white/5 dark:before:to-white/0",
        className
      )}
    >
      {children}
    </div>
  );
}

// Glass Button Component
export function GlassButton({
  children,
  variant = "default",
  size = "md",
  className,
  ...props
}: {
  children: React.ReactNode;
  variant?: "default" | "primary" | "ghost";
  size?: "sm" | "md" | "lg";
  className?: string;
} & React.ButtonHTMLAttributes<HTMLButtonElement>) {
  const variants = {
    default: cn(
      "bg-white/20 dark:bg-gray-800/20",
      "hover:bg-white/30 dark:hover:bg-gray-800/30",
      "border-white/30 dark:border-gray-700/40"
    ),
    primary: cn(
      "bg-blue-500/20 dark:bg-blue-600/20",
      "hover:bg-blue-500/30 dark:hover:bg-blue-600/30",
      "border-blue-400/30 dark:border-blue-500/40",
      "text-blue-700 dark:text-blue-300"
    ),
    ghost: cn(
      "bg-transparent",
      "hover:bg-white/10 dark:hover:bg-gray-800/10",
      "border-transparent"
    ),
  };

  const sizes = {
    sm: "px-3 py-1.5 text-sm",
    md: "px-4 py-2",
    lg: "px-6 py-3 text-lg",
  };

  return (
    <button
      className={cn(
        "relative overflow-hidden rounded-lg",
        "backdrop-blur-md backdrop-saturate-150",
        "border",
        "shadow-[0_4px_16px_0_rgba(31,38,135,0.1)]",
        "transition-all duration-200",
        "focus:outline-none focus:ring-2 focus:ring-blue-500/50 focus:ring-offset-2",
        "active:scale-95",
        variants[variant],
        sizes[size],
        className
      )}
      {...props}
    >
      {/* Inner Shine Effect */}
      <span className="absolute inset-0 -z-10 bg-gradient-to-br from-white/20 to-transparent opacity-50" />
      {children}
    </button>
  );
}

// Glass Input Component
export function GlassInput({
  className,
  ...props
}: React.InputHTMLAttributes<HTMLInputElement>) {
  return (
    <input
      className={cn(
        "w-full rounded-lg",
        "bg-white/20 dark:bg-gray-800/20",
        "backdrop-blur-md backdrop-saturate-150",
        "border border-white/30 dark:border-gray-700/40",
        "px-4 py-2",
        "placeholder:text-gray-500 dark:placeholder:text-gray-400",
        "shadow-[inset_0_2px_4px_0_rgba(31,38,135,0.1)]",
        "transition-all duration-200",
        "focus:bg-white/30 dark:focus:bg-gray-800/30",
        "focus:outline-none focus:ring-2 focus:ring-blue-500/50",
        "focus:border-blue-400/50 dark:focus:border-blue-500/50",
        className
      )}
      {...props}
    />
  );
}